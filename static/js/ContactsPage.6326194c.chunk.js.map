{"version":3,"file":"static/js/ContactsPage.6326194c.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/pages/addContactPage/AddContactPage.module.css?bc0c","components/pages/addContactPage/AddContactPage.jsx","webpack://goit-react-hw-08-phonebook/./src/components/filterForm/FilterForm.module.css?e1b4","components/filterForm/FilterForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/contactsList/contactsListItem/ContactsListItem.module.css?fd28","components/contactsList/contactsListItem/ContactsListItem.jsx","components/contactsList/ContactsList.jsx","components/pages/contactsPage/ContactsPage.jsx","webpack://goit-react-hw-08-phonebook/./src/components/pages/loginPage/LoginPage.module.css?5f5b","components/pages/loginPage/LoginPage.jsx","webpack://goit-react-hw-08-phonebook/./src/components/pages/registerPage/RegisterPage.module.css?7acc","components/pages/registerPage/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"addContactThumb\":\"AddContactPage_addContactThumb__1-LEN\",\"inputForm\":\"AddContactPage_inputForm__F1XTT\",\"label\":\"AddContactPage_label__nsALt\",\"inputArea\":\"AddContactPage_inputArea__Tg0I1\",\"addContactBtnThumb\":\"AddContactPage_addContactBtnThumb__qScqG\",\"addContactBtn\":\"AddContactPage_addContactBtn__SAhzs\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useAddContactMutation, useGetContactsQuery } from '../../../redux/contacts/contactsSlice';\nimport style from './AddContactPage.module.css';\n\nexport default function AddContactPage () {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const { data: contacts } = useGetContactsQuery();\n    const [addContact] = useAddContactMutation();\n\n    const nameInputId = nanoid();\n    const numberInputId = nanoid();\n\n    const onAddContact = contact => {\n        if (contacts && contacts.flatMap(item => item.name).includes(contact.name)) {\n            Notify.failure(`${contact.name} is already in your contacts.`);\n            return;\n        }\n        addContact(contact);\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        onAddContact({\n            name: name,\n            number: number,\n        });\n        Notify.success('Woww! New contact is added)');\n        reset();\n    };\n\n    const handleChange = event => {\n        const { name, value } = event.target;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <div className={style.addContactThumb}>\n            <form className={style.inputForm} onSubmit={handleSubmit}>\n            <label className={style.label}>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    id={nameInputId}\n                    className={style.inputArea}\n                    value={name}\n                    placeholder=\"Input contact's name\"\n                    onChange={handleChange}\n                />\n            </label>\n            <label className={style.label}>\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    id={numberInputId}\n                    className={style.inputArea}\n                    value={number}\n                    placeholder=\"Input contact's number\"\n                    onChange={handleChange}\n                />\n            </label>\n                <div className={style.addContactBtnThumb}>\n                    <button type=\"submit\" className={style.addContactBtn}>\n                Add contact\n            </button>\n            </div>\n        </form>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInputArea\":\"FilterForm_filterInputArea__f8-Xp\",\"filterForm\":\"FilterForm_filterForm__D+jvC\"};","import { useSelector, useDispatch } from 'react-redux/es/exports';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\nimport style from './FilterForm.module.css';\n\nexport const FilterForm = () => {\n    const filter = useSelector(state => state.filter.filter);\n    const dispatch = useDispatch();\n\n    return (\n        <div className={style.filterForm}>\n            <label>\n                <input\n                    type=\"text\"\n                    name=\"filterInput\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    required\n                    className={style.filterInputArea}\n                    value={filter}\n                    placeholder=\"Find contacts by name\"\n                    onChange={e => dispatch(changeFilter(e.target.value))}\n                />\n            </label>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tableRaw\":\"ContactsListItem_tableRaw__-jF2w\",\"tableData\":\"ContactsListItem_tableData__WcwBD\",\"deleteBtn\":\"ContactsListItem_deleteBtn__vvGG1\"};","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from '../../../redux/contacts/contactsSlice';\nimport style from './ContactsListItem.module.css';\n\nexport const ContactsListItem = ({ name, number, id }) => {\n    const [deleteBtn] = useDeleteContactMutation();\n    return (\n        <tr className={style.tableRaw}>\n            <td className={style.tableData}>{name}</td>\n            <td className={style.tableData}>{number}</td>\n            <td className={style.tableData}>\n                <button\n                    className={style.deleteBtn}\n                    type=\"button\"\n                    onClick={() => deleteBtn(id)}>\n                Delete\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nContactsListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n};\n","import { useGetContactsQuery } from '../../redux/contacts/contactsSlice';\nimport { useSelector } from 'react-redux/es/exports';\nimport { ContactsListItem } from './contactsListItem/ContactsListItem';\nimport { useMemo } from 'react';\n\nexport const ContactsList = () => {\n    const filter = useSelector(state => state.filter.filter);\n    const { data: contacts } = useGetContactsQuery();\n\n    const filteredContacts = useMemo(() => {\n        return (\n            contacts &&\n            contacts\n                .filter(contact =>\n                    contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()),\n                )\n                .sort((firstContact, secondContact) =>\n                    firstContact.name.localeCompare(secondContact.name),\n                )\n        );\n    }, [filter, contacts]);\n\n    return (\n        <div>\n            <table>\n                {filteredContacts &&\n                    filteredContacts.map(({ id, name, number }) => (\n                        <ContactsListItem key={id} name={name} number={number} id={id} />\n                    ))}\n            </table>\n        </div>\n    );\n};\n","import { FilterForm } from '../../filterForm/FilterForm';\r\nimport { ContactsList } from '../../contactsList/ContactsList';\r\n\r\nexport default function ContactsPage () {\r\n    return (\r\n        <>\r\n            <FilterForm />\r\n            <ContactsList/>\r\n        </>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"loginThumb\":\"LoginPage_loginThumb__99PBW\",\"inputForm\":\"LoginPage_inputForm__FG+P4\",\"label\":\"LoginPage_label__HiYrP\",\"inputArea\":\"LoginPage_inputArea__YRP3B\",\"addContactBtnThumb\":\"LoginPage_addContactBtnThumb__ZaBcG\",\"loginBtn\":\"LoginPage_loginBtn__67GGZ\"};","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\nimport { login } from '../../../redux/auth/authOperations';\r\nimport style from './LoginPage.module.css';\r\n\r\nexport default function LoginPage () {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const dispatch = useDispatch();\r\n    \r\n    const handleChange = ({ target: { name, value } }) => {\r\n        switch (name) {\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPassword(value);\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        dispatch(login({ email, password }));\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setEmail('');\r\n        setPassword('');\r\n    };\r\n\r\n    const id = {\r\n    email: nanoid(),\r\n    password: nanoid(),\r\n  };\r\n\r\n    return (\r\n        <div className={style.loginThumb}>\r\n            <form className={style.inputForm} onSubmit={handleSubmit}>\r\n            <label className={style.label}>\r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id={id.email}\r\n                    required\r\n                    className={style.inputArea}\r\n                    value={email}\r\n                    placeholder=\"Input your email\"\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label className={style.label}>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    id={id.password}\r\n                    required\r\n                    className={style.inputArea}\r\n                    value={password}\r\n                    placeholder=\"Input your password\"\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n                <div className={style.addContactBtnThumb}>\r\n                    <button type=\"submit\" className={style.loginBtn}>\r\n                Login\r\n            </button>\r\n            </div>\r\n        </form>\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"registerThumb\":\"RegisterPage_registerThumb__vBX46\",\"inputForm\":\"RegisterPage_inputForm__+VJCs\",\"label\":\"RegisterPage_label__mOHlp\",\"inputArea\":\"RegisterPage_inputArea__0jbAz\",\"addContactBtnThumb\":\"RegisterPage_addContactBtnThumb__IFp9g\",\"registerBtn\":\"RegisterPage_registerBtn__Z08I-\"};","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { register } from '../../../redux/auth/authOperations';\r\nimport style from './RegisterPage.module.css';\r\n\r\nexport default function RegisterPage () {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const dispatch = useDispatch();\r\n    \r\n    const handleChange = ({ target: { name, value } }) => {\r\n        switch (name) {\r\n            case 'name':\r\n                return setName(value);\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPassword(value);\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        dispatch(register({ name, email, password }));\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setName('');\r\n        setEmail('');\r\n        setPassword('');\r\n    };\r\n\r\n    return (\r\n        <div className={style.registerThumb}>\r\n            <form className={style.inputForm} onSubmit={handleSubmit}>\r\n            <label className={style.label}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    required\r\n                    className={style.inputArea}\r\n                    value={name}\r\n                    placeholder=\"Input your name\"\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label className={style.label}>\r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    required\r\n                    className={style.inputArea}\r\n                    value={email}\r\n                    placeholder=\"Input your email\"\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label className={style.label}>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    required\r\n                    className={style.inputArea}\r\n                    value={password}\r\n                    placeholder=\"Input your password\"\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n                <div className={style.addContactBtnThumb}>\r\n                    <button type=\"submit\" className={style.registerBtn}>\r\n                Register\r\n            </button>\r\n            </div>\r\n        </form>\r\n        </div>\r\n    );\r\n};\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["AddContactPage","useState","name","setName","number","setNumber","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","nameInputId","nanoid","numberInputId","handleChange","event","target","value","reset","className","style","onSubmit","contact","preventDefault","flatMap","item","includes","Notify","type","pattern","title","required","id","placeholder","onChange","FilterForm","filter","useSelector","state","dispatch","useDispatch","e","changeFilter","ContactsListItem","useDeleteContactMutation","deleteBtn","onClick","ContactsList","filteredContacts","useMemo","toLocaleLowerCase","sort","firstContact","secondContact","localeCompare","map","ContactsPage","LoginPage","email","setEmail","password","setPassword","login","RegisterPage","register","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}